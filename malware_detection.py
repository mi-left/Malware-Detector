import numpy as np
from sklearn.feature_extraction import FeatureHasher
import glob
from sklearn.model_selection import train_test_split
from tensorflow import keras
from keras import layers
from keras import regularizers
from sklearn.metrics import accuracy_score, precision_score, recall_score

from model import extract_features

paths = []

model: keras.Sequential = keras.models.load_model("detection_model")
model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])

selection = input("Choose between standard prediction of executables (p) or evaluation of executable/label pairs (e)\n")

testing = False

if selection == "p":
    file_num = int(input("Input number of files\n"))

    for i in range(file_num):
        paths.append(input("Input file path\n"))

    features = extract_features(paths)

    result = model.predict(features, verbose=2)

    for i in range(file_num):
        if(result[i][0] > 0.5):
            print("Program is Malware")
        else:
            print("Program is Benign")

    #print(result)

    # ../train/malware/0
elif selection == "e":

    if not testing:
        benign_folder_path = input("Input directory path of benign programs\n")
        malware_folder_path = input("Input directory path of malware programs\n")

        benign_file_paths = glob.glob(benign_folder_path + "/*")
        malware_file_paths = glob.glob(malware_folder_path + "/*") #gets all the files within that directory

        benign_features = extract_features(benign_file_paths)
        print("benign features done")
        with open('benign_features.npy', 'wb') as f:
            np.save(f, benign_features)
        malware_features = extract_features(malware_file_paths)
        print("malware features done")
        with open('malware_features.npy', 'wb') as f:
            np.save(f, malware_features)
    else:
        with open('benign_features.npy', 'rb') as f:
            benign_features = np.load(f)
        with open('malware_features.npy', 'rb') as f:
            malware_features = np.load(f)
    # Prepare labels
    benign_labels = np.zeros(len(benign_features))
    malware_labels = np.ones(len(malware_features))

    # Combine features and labels

    features = np.vstack((benign_features, malware_features))
    labels_set = np.hstack((benign_labels, malware_labels))


    predictions = model.predict(features, verbose=2)
    temp = []
    for i in range(predictions.size):
        if predictions[i] < 0.5:
            temp.append(0.0)
        else:
            temp.append(1.0)
    predictions = np.array(temp)
    # Calculate accuracy
    accuracy = accuracy_score(labels_set, predictions)

    # Calculate precision
    precision = precision_score(labels_set, predictions)

    # Calculate recall
    recall = recall_score(labels_set, predictions)

    print("Accuracy: ", accuracy)
    print("Precision: ", precision)
    print("Recall: ", recall)

    # ../train/maltest
    # ../train/benigntest
